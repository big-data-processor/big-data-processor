class BDPEventEmitter{constructor(){this.events={}}_getEventListByName(e){return void 0===this.events[e]&&(this.events[e]=new Set),this.events[e]}on(e,t){this._getEventListByName(e).add(t)}once(e,t){const i=this,a=function(...s){i.removeListener(e,a),t.apply(i,s)};this.on(e,a)}emit(e,...t){this._getEventListByName(e).forEach(function(e){e.apply(this,t)}.bind(this))}removeListener(e,t){this._getEventListByName(e).delete(t)}}class BDPClientAPI{constructor(){this._initialized=!1,this._registerEventListener=((e,t)=>{this.eventEmitter.on(e,t)}),this._removeEventListener=((e,t)=>{this.eventEmitter.removeListener(e,t)}),this._registerErrorListener=((e,t)=>{this.errorEmitter.on(e,t)}),this._removeErrorListener=((e,t)=>{this.errorEmitter.removeListener(e,t)}),this._newID=function(){return(new Date).valueOf()+"-"+Math.round(String(1e5*Math.random()))},this._callBdpApi=(async(e,t,i)=>(i||(i=this._newID()),window.parent.postMessage({call:e,value:t,id:i,type:"sent"},"*"),new Promise((e,t)=>{this.apiEmitter.once(i,i=>i.err?t(i.err):e(i.value))})))}async initialize(e){if(!this.initialized){this.apiEmitter=new BDPEventEmitter,this.eventEmitter=new BDPEventEmitter,this.errorEmitter=new BDPEventEmitter,this.changeEmitter=new BDPEventEmitter;const t=e=>{const t=e.data;"object"==typeof t&&t.type&&("event"===t.type?this.eventEmitter.emit(t.id,t.value):"error"===t.type?this.errorEmitter.emit(t.id,t.value):"change"===t.type?this.changeEmitter.emit(t.value.target,t.value):(t.type="received",this.apiEmitter.emit(t.id,t)))};window.addEventListener("message",t,!1),e&&this.listenErrors(e)}await this._callBdpApi("handshake"),this._initialized=!0}get initialized(){return this._initialized}log(e){this._callBdpApi("log",JSON.stringify(e))}async listFiles(){return await this._callBdpApi("listFiles",{})}openFileLink(e){window.open("/dataFile/"+e+"/info","","width=800,height=600")}async getFileBlob(e,t,i,a){const s=this._newID();a&&this._registerErrorListener(s,a),i&&this._registerEventListener(s,i);const r=await this._callBdpApi("getFileBlob",{fileID:e,subPath:t},s);return i&&this._removeEventListener(s,i),a&&this._removeErrorListener(s,a),r}async getCurrentFileInfo(){return this._callBdpApi("getCurrentFileInfo")}async getCurrentResultInfo(){return this._callBdpApi("getCurrentResultInfo")}async globFilesInFolder(e,t){return this._callBdpApi("globFilesInFolder",{fileID:e,globbyExprs:t})}async uploadFiles(e,t,i,a){const s=this._newID();i&&this._registerEventListener(s,i),a&&this._registerErrorListener(s,a);const r=await this._callBdpApi("uploadFiles",{files:e,options:t},s);return i&&this._removeEventListener(s,i),a&&this._removeErrorListener(s,a),r}async uploadFileBlob(e,t,i,a,s){const r=this._newID();a&&this._registerEventListener(r,a),s&&this._registerErrorListener(r,s);const n=await this._callBdpApi("uploadFileBlob",{fileBlob:e,name:t,desc:i.desc,tags:i.tags,folderID:i.folderID,keepFileName:!!i.keepFileName,format:i.format},r);return a&&this._removeEventListener(r,a),s&&this._removeErrorListener(r,s),n[0]}async navigateToProjectPage(e){await this._callBdpApi("navigateToProjectPage",{pageIndex:e})}async navigateToFilePage(e,t){await this._callBdpApi("navigateToFilePage",{fileID:e,pageIndex:t})}async navigateToBdpDataFile(e){await this._callBdpApi("navigateToBdpDataFile",{fileID:e})}async navigateToResultPage(e,t){await this._callBdpApi("navigateToResultPage",{resultID:e,pageIndex:t})}async navigateToBdpResult(e){await this._callBdpApi("navigateToBdpResult",{resultID:e})}openResultLink(e){window.open("/result/"+e+"/info","","width=800,height=600")}async createFolder(e,t){return await this._callBdpApi("createFolder",{name:e,desc:t})}async updataFileInfo(e,t){return await this._callBdpApi("updataFileInfo",{fileID:e,newInfo:{name:t.name||void 0,desc:t.desc||void 0,tags:t.tags||void 0}})}async deleteFile(e){return await this._callBdpApi("deleteFile",{fileID:e})}async getTaskArguments(e){return await this._callBdpApi("getTaskArguments",{identifier:e})}async getTaskInfo(e){return await this._callBdpApi("getTaskInfo",{identifier:e})}async listTasks(){return await this._callBdpApi("listTasks")}async getTaskInputGuide(e){return await this._callBdpApi("getTaskInputGuide",{identifier:e})}async executeTask(e,t,i,a,s){const r=this._newID();s&&this._registerErrorListener(r,s);const n=await this._callBdpApi("executeTask",{identifier:e,resultInfo:t,inputs:i,outputs:a},r);return s&&this._removeErrorListener(r,s),n}watchResultChange(e){return this.changeEmitter.on("Result",e),{stop:()=>this.changeEmitter.removeListener("Result",e)}}stopWatchResultChange(e){this.changeEmitter.removeListener("Result",e)}watchFileChange(e){return this.changeEmitter.on("DataFile",e),{stop:()=>this.changeEmitter.on("DataFile")}}stopWatchFileChange(e){this.changeEmitter.removeListener("DataFile",e)}watchResultMsgChange(e){return this.changeEmitter.on("ResultMsg",e),{stop:()=>this.changeEmitter.removeListener("ResultMsg",e)}}stopWatchResultMsgChange(e){this.changeEmitter.removeListener("ResultMsg",e)}async navigateTo(){}async getChildResults(){}async deleteResult(){}async requestDatabase(e,t,i){const a=this._newID();return await this._callBdpApi("requestDatabase",{version:e,objectStoreSettings:t,creatingIndexes:i},a)}async requestDatabaseRemove(){const e=this._newID();return await this._callBdpApi("requestDatabaseRemove",{},e)}async dataStoreQuery(e,t,i,a,s){const r=this._newID();if("function"==typeof a&&(s=a,a="next"),!s||"function"!=typeof s)return;this._registerEventListener(r,s);const n=await this._callBdpApi("dataStoreQuery",{storeName:e,query:t,indexName:i,direction:a},r);return this._removeEventListener(r,s),n}async dataStoreGet(e,t,i){const a=this._newID();return await this._callBdpApi("dataStoreGet",{storeName:e,key:t,indexName:i},a)}async dataStoreAdd(e,t,i){this._newID();return await this._callBdpApi("dataStoreAdd",{storeName:e,dataItems:t,dataKeys:i})}async dataStorePut(e,t,i){const a=this._newID();return await this._callBdpApi("dataStorePut",{storeName:e,dataItems:t,dataKeys:i},a)}async dataStoreCount(e,t){const i=this._newID();return await this._callBdpApi("dataStoreCount",{storeName:e,queryKeyRange:t||void 0},i)}async dataStoreClear(e){const t=this._newID();return await this._callBdpApi("dataStoreClear",{storeName:e},t)}async dataStoreRemove(e){const t=this._newID();return await this._callBdpApi("dataStoreRemove",{storeName:e},t)}async requestFileSelectUI(){}async requestUploaderUI(){await this._callBdpApi("requestUploaderUI",{})}}const BDPClientUtils={sleep:e=>new Promise(t=>setTimeout(()=>t(),1e3*e)),readFileBlob:(e,t)=>new Promise((i,a)=>{const s=new FileReader;switch(s.addEventListener("loadend",e=>{i(e.target.result)}),s.addEventListener("error",e=>{a(e)}),t){case"arrayBuffer":s.readAsArrayBuffer(e);break;case"binaryString":s.readAsBinaryString(e);break;default:s.readAsText(e)}})};window.BDPClientAPI=BDPClientAPI;
